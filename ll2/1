#include <stdlib.h>
#include <unistd.h>
#include <stdio.h>
#include <portaudio.h>
#include <string.h>
#include "pa_ringbuffer.h"
#include "pa_util.h"

#define SAMPLE_RATE (48000)

typedef struct paTestDataStruct
{
	float left_phase;
	float right_phase;

    /* Ring buffer (FIFO) for "communicating" towards audio callback */
    PaUtilRingBuffer    rBufToRT;
    void*               rBufToRTData;

    /* Ring buffer (FIFO) for "communicating" from audio callback */
    PaUtilRingBuffer    rBufFromRT;
    void*               rBufFromRTData;

} paTestData;  

static paTestData data;

		/* This routine will be called by the PortAudio engine when audio is needed.
		It may called at interrupt level on some machines so don't do anything
		that could mess up the system like calling malloc() or free().
		*/ 
static int 
paTestCallback( 
	const void *inputBuffer, 
	void *outputBuffer,
	unsigned long framesPerBuffer,
	const PaStreamCallbackTimeInfo* timeInfo,
	PaStreamCallbackFlags statusFlags,
	void *userData )
{
	/* Cast data passed through stream to our structure. */
	paTestData *data = (paTestData*)userData;
	float *out = (float*)outputBuffer;
	
	memset(out,0,framesPerBuffer * 2 * sizeof(float)); //num channels

	return 0;
}

int
main(int argc,char** argv) {

	PaError err;
	PaStream *stream;

	printf("hello world\n");

    /* Initialize communication buffers (queues) */
    data.rBufToRTData = PaUtil_AllocateMemory(sizeof(CFormat*) * 256);
   	if (data.rBufToRTData == NULL)
   	{
    	return 1;
  	}
    PaUtil_InitializeRingBuffer(&data.rBufToRT, sizeof(CFormat*), 256, data.rBufToRTData);
 
    data.rBufFromRTData = PaUtil_AllocateMemory(sizeof(CFormat*) * 256);
    if (data.rBufFromRTData == NULL)
    {
    	return 1;
    }
    PaUtil_InitializeRingBuffer(&data.rBufFromRT, sizeof(CFormat*), 256, data.rBufFromRTData);

	err=Pa_Initialize();

	if (err != paNoError)  goto error;

	err=Pa_OpenDefaultStream( &stream,
							  0, //input channels
							  2, //output channels
							  paFloat32,
							  SAMPLE_RATE,
							  256,
							  paTestCallback,
							  &data );

	/*
	 * 2. split kernel into multiple buffer blocks
	 * 3. build convolution engine
	 */

	err=Pa_StartStream(stream);
	if (err != paNoError) goto error;
	Pa_Sleep(10000);
	err=Pa_StopStream(stream);
	if (err != paNoError) goto error;

	err=Pa_Terminate();
	if (err != paNoError) goto error;
	exit(0);
	error:
	printf("PortAudio Error: %s \n",Pa_GetErrorText(err));
	exit(1);

}
